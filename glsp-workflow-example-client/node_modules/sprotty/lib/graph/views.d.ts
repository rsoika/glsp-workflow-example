/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { VNode } from "snabbdom";
import { IViewArgs, IView, RenderingContext } from "../base/views/view";
import { ShapeView } from '../features/bounds/views';
import { IntersectingRoutedPoint, Intersection } from '../features/edge-intersection/intersection-finder';
import { SRoutableElement, SRoutingHandle } from '../features/routing/model';
import { EdgeRouterRegistry, RoutedPoint } from '../features/routing/routing';
import { RoutableView } from '../features/routing/views';
import { Point, PointToPointLine } from '../utils/geometry';
import { SCompartment, SEdge, SGraph, SLabel } from "./sgraph";
/**
 * IView component that turns an SGraph element and its children into a tree of virtual DOM elements.
 */
export declare class SGraphView<IRenderingArgs> implements IView {
    edgeRouterRegistry: EdgeRouterRegistry;
    render(model: Readonly<SGraph>, context: RenderingContext, args?: IRenderingArgs): VNode;
}
export declare class PolylineEdgeView extends RoutableView {
    edgeRouterRegistry: EdgeRouterRegistry;
    render(edge: Readonly<SEdge>, context: RenderingContext, args?: IViewArgs): VNode | undefined;
    protected renderLine(edge: SEdge, segments: Point[], context: RenderingContext, args?: IViewArgs): VNode;
    protected renderAdditionals(edge: SEdge, segments: Point[], context: RenderingContext): VNode[];
    protected renderDanglingEdge(message: string, edge: SEdge, context: RenderingContext): VNode;
}
/**
 * A `PolylineEdgeView` that renders jumps over intersections.
 *
 * In order to find intersections, `IntersectionFinder` needs to be configured as a `TYPES.IEdgeRoutePostprocessor`
 * so that that intersections are declared as `IntersectingRoutedPoint` in the computed routes.
 *
 * @see IntersectionFinder
 * @see IntersectingRoutedPoint
 * @see EdgeRouterRegistry
 */
export declare class JumpingPolylineEdgeView extends PolylineEdgeView {
    protected jumpOffsetBefore: number;
    protected jumpOffsetAfter: number;
    protected skipOffsetBefore: number;
    protected skipOffsetAfter: number;
    protected renderLine(edge: SEdge, segments: Point[], context: RenderingContext, args?: IViewArgs): VNode;
    protected intersectionPath(edge: SEdge, segments: Point[], intersectingPoint: IntersectingRoutedPoint, args?: IViewArgs): string;
    protected getOtherLineSegment(currentEdge: SEdge, intersection: Intersection, args?: IViewArgs): PointToPointLine | undefined;
    protected getLineSegment(edge: SRoutableElement, intersection: Intersection, args?: IViewArgs, segments?: Point[]): PointToPointLine;
    protected createJumpPath(intersectionPoint: Point, lineSegment: PointToPointLine): string;
    protected createSkipPath(intersectionPoint: Point, lineSegment: PointToPointLine): string;
}
/**
 * A `PolylineEdgeView` that renders gaps on intersections.
 *
 * In order to find intersections, `IntersectionFinder` needs to be configured as a `TYPES.IEdgeRoutePostprocessor`
 * so that that intersections are declared as `IntersectingRoutedPoint` in the computed routes.
 *
 * @see IntersectionFinder
 * @see IntersectingRoutedPoint
 * @see EdgeRouterRegistry
 */
export declare class PolylineEdgeViewWithGapsOnIntersections extends JumpingPolylineEdgeView {
    protected skipOffsetBefore: number;
    protected skipOffsetAfter: number;
    protected createJumpPath(intersectionPoint: Point, lineSegment: PointToPointLine): string;
    protected createSkipPath(intersectionPoint: Point, lineSegment: PointToPointLine): string;
}
export declare class SRoutingHandleView implements IView {
    edgeRouterRegistry: EdgeRouterRegistry;
    minimalPointDistance: number;
    render(handle: Readonly<SRoutingHandle>, context: RenderingContext, args?: {
        route?: RoutedPoint[];
    }): VNode;
    getRadius(): number;
}
export declare class SLabelView extends ShapeView {
    render(label: Readonly<SLabel>, context: RenderingContext): VNode | undefined;
}
export declare class SCompartmentView implements IView {
    render(compartment: Readonly<SCompartment>, context: RenderingContext, args?: IViewArgs): VNode | undefined;
}
//# sourceMappingURL=views.d.ts.map