"use strict";
/********************************************************************************
 * Copyright (c) 2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var tinyqueue_1 = __importDefault(require("tinyqueue"));
var sweepline_1 = require("./sweepline");
function isIntersectingRoutedPoint(routedPoint) {
    return routedPoint !== undefined && 'intersections' in routedPoint && 'kind' in routedPoint;
}
exports.isIntersectingRoutedPoint = isIntersectingRoutedPoint;
exports.BY_X_THEN_Y = function (a, b) {
    if (a.intersectionPoint.x === b.intersectionPoint.x) {
        return a.intersectionPoint.y - b.intersectionPoint.y;
    }
    return a.intersectionPoint.x - b.intersectionPoint.x;
};
/**
 * Finds intersections among edges and updates routed points to reflect those intersections.
 */
var IntersectionFinder = /** @class */ (function () {
    function IntersectionFinder() {
    }
    /**
     * Finds all intersections in the specified `routing` and replaces the `RoutedPoints` that are
     * intersecting by adding intersection information to routing points (@see `IntersectingRoutedPoints`).
     * @param routing the edge routing to find intersections for and update.
     */
    IntersectionFinder.prototype.apply = function (routing) {
        var intersections = this.find(routing);
        this.addToRouting(intersections, routing);
    };
    /**
     * Finds the intersections in the specified `routing` and returns them.
     * @param routing the edge routing to find intersections for and update.
     * @returns the identified intersections.
     */
    IntersectionFinder.prototype.find = function (routing) {
        var eventQueue = new tinyqueue_1.default(undefined, sweepline_1.checkWhichEventIsLeft);
        routing.routes.forEach(function (route, routeId) { return sweepline_1.addRoute(routeId, route, eventQueue); });
        return sweepline_1.runSweep(eventQueue);
    };
    IntersectionFinder.prototype.addToRouting = function (intersections, routing) {
        for (var _i = 0, intersections_1 = intersections; _i < intersections_1.length; _i++) {
            var intersection = intersections_1[_i];
            var routable1 = routing.get(intersection.routable1);
            var routable2 = routing.get(intersection.routable2);
            this.addIntersectionToRoutedPoint(intersection, routable1, intersection.segmentIndex1);
            this.addIntersectionToRoutedPoint(intersection, routable2, intersection.segmentIndex2);
        }
    };
    IntersectionFinder.prototype.addIntersectionToRoutedPoint = function (intersection, routedPoint, segmentIndex) {
        if (routedPoint && routedPoint.length > segmentIndex) {
            var segment = routedPoint[segmentIndex + 1];
            if (isIntersectingRoutedPoint(segment)) {
                segment.intersections.push(intersection);
            }
            else {
                var intersectingRoutedPoint = __assign(__assign({}, segment), { intersections: [intersection] });
                routedPoint[segmentIndex + 1] = intersectingRoutedPoint;
            }
        }
    };
    IntersectionFinder = __decorate([
        inversify_1.injectable()
    ], IntersectionFinder);
    return IntersectionFinder;
}());
exports.IntersectionFinder = IntersectionFinder;
//# sourceMappingURL=intersection-finder.js.map