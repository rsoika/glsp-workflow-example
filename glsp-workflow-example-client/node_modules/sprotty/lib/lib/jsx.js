"use strict";
/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var snabbdom_1 = require("snabbdom");
var modulesNS = ['hook', 'on', 'style', 'class', 'props', 'attrs', 'dataset'];
var SVGNS = 'http://www.w3.org/2000/svg';
function normalizeAttrs(source, defNS, namespace) {
    var data = {};
    if (namespace) {
        data.ns = namespace;
    }
    if (source === null) {
        return data;
    }
    modulesNS.forEach(function (mod) {
        if (source[mod]) {
            data[mod] = source[mod];
        }
    });
    Object.keys(source).forEach(function (key) {
        if (key === 'key' || key === 'classNames' || key === 'selector')
            return;
        var idx = key.indexOf('-');
        if (idx > 0)
            addAttr(key.slice(0, idx), key.slice(idx + 1), source[key]);
        else if (!data[key])
            addAttr(defNS, key, source[key]);
    });
    return data;
    function addAttr(modname, key, val) {
        var mod = data[modname] || (data[modname] = {});
        mod[key] = val;
    }
}
// eslint-disable-next-line @typescript-eslint/naming-convention
function JSX(namespace, defNS) {
    if (defNS === void 0) { defNS = 'props'; }
    return function (tag, attrs) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        return snabbdom_1.jsx(tag, normalizeAttrs(attrs, defNS, namespace), children);
    };
}
exports.JSX = JSX;
var html = JSX();
exports.html = html;
var svg = JSX(SVGNS, 'attrs');
exports.svg = svg;
//# sourceMappingURL=jsx.js.map